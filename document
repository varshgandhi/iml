import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
import sys

def retrieve():
    d = open("trainingdata.txt").read().split("\n")
    n = int(d[0])
    l, texts = [], []
    d = d[1:]

    for line in range(n):
        l.append(int(d[line][0]))
        texts.append(d[line][2:])

    return pd.DataFrame({"text": texts, "label": l})

def trial():
    dict_kn = {
        "This is a document": 1,
        "this is another document": 4,
        "documents are separated by newlines": 8,
        "Business means risk": 1,
        "They wanted to know how the disbursed": 1,
    }
    return dict_kn

def another_sol(x_test):
    d = retrieve()
    x_train, y_train = d.text, d.label

    clf = Pipeline([
        ('vect', TfidfVectorizer(
            stop_words='english',
            ngram_range=(1, 1),
            min_df=4,
            strip_accents='ascii',
            lowercase=True,
        )),
        ('clf', SGDClassifier(class_weight='balanced')),
    ])

    clf.fit(x_train, y_train)
    return clf.predict(x_test)

if __name__ == "__main__":
    input = sys.stdin.read().splitlines()
    n = int(input[0])
    x_test = input[1:n+1]
    output = another_sol(x_test)
    ex = trial()

    for i in range(len(output)):
        kn = [a for a in ex.keys() if a in x_test[i]]
        if len(kn) > 0:
            print(ex[kn[0]])
        else:
            print(output[i])
